#!/usr/bin/python
# -*- coding: utf-8 -*-

# AstDemo
# Processa mensagens XMPP - DEMO para site e conex√µes externas MOS
#
# Marcelo H. Terres <mhterres@gmail.com>
# 2014-08-04
#
# Versao 0.1.3
# Updated 2014-12-26
#

import sys
import os
import socket
import subprocess
import time
import re
import psycopg2
import psycopg2.extras

from asterisk import agi
from astdemo_defs import infoVoIP
from astdemo_defs import sipPeer
from astdemo_defs import sipPeers
from astdemo_defs import iaxPeers
from astdemo_defs import showHelp
from astdemo_defs import getChannel
from astdemo_defs import ManagerDict
from astdemo_defs import validNumber
from astdemo_defs import getSocketData
from astdemo_defs import getJidExtension
from astdemo_defs import getAsteriskRealtimeInformation

from astdemo_classes import XMPPp
from astdemo_classes import astDB
from astdemo_classes import Queue
from astdemo_classes import Config
from astdemo_classes import connectAMI
from astdemo_classes import activeLogs

activeLogs('/tmp','astdemo','all')
print "Starting AstDemo.agi..."

print "Loading config..."
cfg=Config()

print "Starting AGI connection..."
agi = agi.AGI()

astdb = astDB(agi)

xmppdomain = agi.get_variable('XMPPDOMAIN')
xmppresource = agi.get_variable('XMPPRESOURCE_DEMO')

jid = ((((agi.get_variable('MESSAGE(from)')).split(":"))[1]).split("/"))[0]

print "Getting message..."

message = agi.get_variable('MESSAGE(body)')

cmds = message.split()

cmdini = cmds[0]

print "Message: %s" % message
print "Command: %s" % cmdini

returnmsg=""

if cfg.asterisk_realtime=="1":

	params=getAsteriskRealtimeInformation(jid)
	extension_number=params[0]
	extension_jid=params[1]
	extension_callerid=params[2]

if cmdini == 'help':

	print "Running help option"
	returnmsg=showHelp()

elif cmdini == "info":

	try:

		param = cmds[1];
	except:

		returnmsg = "You need to inform parameter.\r";
		returnmsg += "Syntax: info <voip|xmpp>";
	else:

		if param == "xmpp":

			myXMPP=XMPPp()

			if not myXMPP.connected:

				returnmsg = "Can't connect %s XMPP server." % myXMPP.domain

			else:

				if not myXMPP.authenticated:


					returnmsg = "Can't auth on %s XMPP server." % myXMPP.domain
				else:

					returnmsg = "XMPP Informations\r"

					s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
					s.connect((cfg.serverinfo_host,int(cfg.serverinfo_port)))

					returnmsg += "Server " + myXMPP.domain + " available.\r"
					returnmsg += getSocketData(s,'openfire version').replace("\n","") + "\r" 
					returnmsg += getSocketData(s,'openfire uptime').replace("\n","").replace("Openfire ","") + "\r"

					s.close()

		elif param == "voip":

			returnmsg=infoVoIP()

		else:
			returnmsg = "Invalid parameter.\r";
			returnmsg += "Syntaxe: info <voip|xmpp>";

elif cmdini == "iaxpeers":

	returnmsg = iaxPeers()

elif cmdini == "sippeers":

	returnmsg = sipPeers()

elif cmdini == "sippeer":

	if len(cmds)==1:

		returnmsg = "You need to inform extension."
	else:

		exten=cmds[1]
		returnmsg=sipPeer(exten)

elif cmdini == "queuemsg":

	if cfg.asterisk_realtime=="1":

		if extension_number=="" or extension_jid=="":

			returnmsg = "You need to associate your jid with an extension in sip asterisk table."

		else: 

			try:

				queue = cmds[1];

			except:

				returnmsg = "You need to inform queue.\r";
				returnmsg += "Syntax: queuemsg <queue> <message>";
			else:

				try:

					message = cmds[2];

				except:

					returnmsg = "You need to inform your message.\r";
					returnmsg += "Syntax: queuemsg <queue> <message>";
				else:

					myqueue = Queue(queue,agi)

					if myqueue.isavailable:

						mymembers = myqueue.getmembers()
			
						i=0;
			
						for item in cmds:

							if (i > 2):

								message += " " + item;

							i+=1;

						myConnect = connectAMI()
						s = myConnect.socket

						for member in mymembers:

							membersplited=member.split("/")
							myexten = (membersplited[1].replace('\n','')).replace('\r','')

							xmppresource = agi.get_variable('XMPPRESOURCE')
							jid=getJidExtension(myexten)

							if len(jid.strip()) > 0:

								s.send('Action: JabberSend\nJabber:	' + xmppresource + '\nScreenName: ' + jid + '\nMessage: ' + message + '\n\n')

						s.close()

						returnmsg = "Message	sent."
	
					else:

						returnmsg = "Queue %s unavailable." % queue

elif cmdini == "callerid":

	if cfg.asterisk_realtime=="1":

		if extension_number=="" or extension_jid=="":

			returnmsg = "You need to associate your jid with an extension in sip asterisk table."

		else:

			try:

				callerid_enabled = astdb.get('jid',extension_number)
			except:

				astdb.put('jid',extension_number,extension_jid)
				returnmsg = "CallerID XMPP Message enabled.";
			else:

				astdb.rem('jid',extension_number)
				returnmsg = "CallerID XMPP Message disabled.";
	else:

		try:
			param = cmds[1];
		except:

			returnmsg = "You need to inform at least your extension.\r";
			returnmsg += "Syntax: callerid <extension> [jid]";
		else:

			extension_number = cmds[1]

			try:
				callerid_enabled = astDB(agi,'jid','get',extension_number)
			except:

				try:
					extension_jid = cmds[2]
				except:

					returnmsg = "To enable this resource you need to inform your extension and your jid.\r"
					returnmsg += "Syntax: callerid <extension> <jid>";
				else:

					astDB(agi,'jid','put',extension_number,extension_jid)
					returnmsg = "CallerID XMPP Message enabled.";
			else:

				astDB(agi,'jid','del',extension_number,)
				returnmsg = "CallerID XMPP Message disabled.";

elif cmdini == "call":

	try:
		param = cmds[1];
	except:

		returnmsg = "You need to inform number.\r";
		returnmsg += "Syntax: call <number>";
	else:

		if validNumber(jid,param):

			channel=getChannel(jid,param)

			myConnect = connectAMI()
			s = myConnect.socket

			action='ACTION: Originate\nChannel: ' + channel + '/' + param + '\nExten: testcall\nPriority: 1\nTimeout: 60000\nContext: testcall\n\n'
			agi.verbose('Sending ' + action)

			s.send(action)
			returnmsg = "Call to number %s realized." % param

			s.close()
		else:

			returnmsg = "JID %s is not authorized to call %s " % (jid,param)

elif cmdini == "dnd":

	if cfg.asterisk_realtime=="1":

		if extension_number=="" or extension_jid=="":

			returnmsg = "You need to associate your jid with an extension in sip asterisk table."

		else:
			try:

				param = cmds[1];
			except:

				returnmsg = "You need to inform operation.\r";
				returnmsg += "Syntaxe: dnd <on|off|status>";
			else:

				try:

					dnd = astdb.get('dnd',extension_number)
				except:

					dnd=0
				else:

					dnd=1

				if param == "on":	

					if dnd == 1:

						returnmsg = "DND is already enabled to extension %s." % extension_number
					else:

						astdb.put('dnd',extension_number,1);
						returnmsg = "DND is enabled to extension %s." % extension_number
				elif param == "off":

					if dnd == 0:

						returnmsg = "DND is already disabled to extension %s." % extension_number
					else:

						astdb.rem('dnd',extension_number);
						returnmsg = "DND is disabled to extension %s." % extension_number;

				elif param == "status":

					if dnd == 1:

						returnmsg = "DND is enabled."
					else:

						returnmsg = "DND is disabled."
				else:

					returnmsg = "Operation " + param + " is invalid."
																		
elif cmdini == "version":

	returnmsg = "You are running AstDemo version %s " % cfg.version

elif cmdini == "whoami":

	if cfg.asterisk_realtime=="1":

		if extension_number=="" or extension_jid=="":

			returnmsg = "You need to associate your jid with an extension in sip asterisk table."
		else:

			returnmsg = "I'm %s.\r" % extension_callerid
			returnmsg+= "My extension is %s.\r" % extension_number
			returnmsg+= "My Jabber ID is %s." % extension_jid

elif cmdini == "queueoff":

	if cfg.asterisk_realtime=="1":

		if extension_number=="" or extension_jid=="":

			returnmsg = "You need to associate your jid with an extension in sip asterisk table."

		else:

			try:

				param = cmds[1];

			except:

				returnmsg = "Queue not informed.\r";
				returnmsg += "Syntax: queueoff <queue>";
			else:

				myqueue=Queue(param,agi)

				if myqueue.isavailable:

					myqueue.getmembers()
					returnmsg=myqueue.removemember(extension_number,agi)
				else:

					returnmsg = "Queue %s doesn't exist." % param

elif cmdini == "queueon":

	if cfg.asterisk_realtime=="1":

		if extension_number=="" or extension_jid=="":

			returnmsg = "You need to associate your jid with an extension in sip asterisk table."

		else:


			try:

				param = cmds[1];

			except:

				returnmsg = "Queue not informed.\r";
				returnmsg += "Syntax: queueon <queue>";
			else:

				myqueue=Queue(param,agi)

				if myqueue.isavailable:

					myqueue.getmembers()
					returnmsg=myqueue.addmember(extension_number,agi)

				else:

					returnmsg = "Queue %s doesn't exist." % param

elif cmdini == "queue":

	if cfg.asterisk_realtime=="1":

		if extension_number=="" or extension_jid=="":

			returnmsg = "You need to associate your jid with an extension in sip asterisk table."

		else:

			try:

				param = cmds[1];

			except:
			
				returnmsg = "Queue not informed.\r";
				returnmsg += "Syntax: queue <queue>";
			else:

				myqueue = Queue(param,agi)

				if myqueue.isavailable:

					mymembers = myqueue.getmembers()

					returnmsg = "Queue %s informations:\r" % myqueue.name
					returnmsg += "Logged members: %s" % myqueue.loggedmembers
					returnmsg += "Members available: %s" % myqueue.availablemembers

					returnmsg+="Strategy: %s" % myqueue.strategy
					returnmsg+="Calls: %s" % myqueue.calls
					returnmsg+="Completed: %s" % myqueue.completed
					returnmsg+="Abandoned: %s" % myqueue.abandoned
					returnmsg+="Hold time: %s" % myqueue.holdtime
					returnmsg+="Talk time: %s" % myqueue.talktime

					returnmsg +="Queue members\r"

					for member in mymembers:

						returnmsg += member
	
				else:

					returnmsg = "Queue %s doesn't exist." % param
else:

	returnmsg = "Command %s not found." % cmdini 
	
agi.set_variable("RETURN_MSG", returnmsg)

